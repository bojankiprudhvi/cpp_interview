design pattern 
general repitabel solution for a common problem
well tested and documnted solution 
language neautrl
types
    creational design pattern -6  
behaveriol design pattern -12
structural design pattern -8


1) factory design pattern // expample Fruits
 depending upon the type of object you need to call the api in the factroy and the factory will decide which class it need to create 
 factory class is is a standed class that can be used by diffent clent without exposing things to client.
2) abstact factory design pattern
system configured with one of the multiple 

3) single ton design pattern(sam module gettign the object instace with ::)
only one instance 
global access
no ownership
lasy initialization

advantagex
 saving memory 
 signle access point 
 flexibilty
 
 
 usage 
 setting in the appliction  
 
 create the instance in mian before cretain the thread so that there wont be need of using mutex and all.
 
 
 observer design patten 
 when one object state modifed all its deppendency object will be notified.
 
 
 
 
creational design pattern 
1) factory design pattern 

//example Fruits


#include<iostream>
using namespace std;
class Fruit{
    public:
    virtual void taste()=0;
    static Fruit* giveObj(int type);
};
class Apple:public Fruit
{
public:
void taste()
{
    cout<<"the tsate is sweet"<<"\n";
}
};
class Orange:public Fruit
{
public:
void taste()
{
    cout<<"the tsate is sweet"<<"\n";
}
};
class Grape:public Fruit
{
public:
void taste()
{
    cout<<"the tsate is sweet"<<"\n";
}
};
Fruit* Fruit::giveObj(int type)
{
    if(type == 1)
    {
        return new Apple();
    }
    else if(type == 2)
    {
        return new Orange();
    }
    else if(type == 3)
    {
        return new Grape();
    }
    else
    {
        return nullptr;
    }
}
int main()
{
    Fruit* apple = Fruit::giveObj(1);
    apple->taste();
    return 0;
}

singleton design pattern 
allows to create only one instace to the class;
//expample constructor and operator deletin and createing instance inside class;
#include<iostream>
using namespace std;
class Singleton 
{
  public:
  
 static Singleton* getInstance()
  {
      if(!instance)
      {
          instance = new Singleton();
      }
      return instance;
  }
  void performope()
  {
      cout<<"performing soem operation";
  }
  Singleton(const Singleton&) = delete;
  Singleton& operator = (const Singleton& )= delete;
  
  private:
  static Singleton* instance;
  Singleton()
  {
      cout<<"this is Singleton constructor"<<"\n";
  }
  ~Singleton()
  {
      cout<<"this is Singleton Destructor"<<"\n";
  }
};
Singleton* Singleton::instance = nullptr;
int main()
{
   Singleton* obj= Singleton::getInstance();
   obj->performope();
   Singleton obj1 = new Singleton();
   return 0;
}

builder pattern

// example plane builging
#include<iostream>
#include<string>
using namespace std;
//product
class Plane{
  string _plane;
  string _engine;
  string _body;
  public:
  Plane(string planetype):_plane(planetype){}
  void setengine(string engine)
  {
      _engine= engine;
  }
  void setbody(string body)
  {
       _body= body;
  }
  string getengine()
  {
      return _engine;
  }
  string getbody()
  {
      return _body;
  }
  void show()
  {
      cout<<"current plenae is"<<_plane<<_engine<<_body;
  }
};
//builder interface
class Builder{
    public:
    Plane *_plane;
    virtual void getinstance() =0;
    virtual void buildEngine()=0;
    virtual void buildBody()=0;
    Plane* getPlane()
    {
        return _plane;
    }
};
class JetBuilder:public Builder {
    void getinstance(){
        _plane = new Plane("building plane");
    }
    void buildEngine()
    {
        _plane->setengine("building jet engine");
    }
    void buildBody()
    {
        _plane->setbody("buildign jet body");
    }
    
};
class PropBuilder:public Builder {
    void getinstance(){
        _plane = new Plane("building plane");
    }
    void buildEngine()
    {
        _plane->setengine("building PropBuilder engine");
    }
    void buildBody()
    {
        _plane->setbody("buildign PropBuilder body");
    }
    
};

class Director
{
    public:
  Plane* createPlane (Builder* obj)  
  {
      obj->getinstance();
      obj->buildEngine();
      obj->buildBody();
      return obj->getPlane();
  }
};

int main()
{
    Director dir;
    JetBuilder jb;
    PropBuilder pb;
    Plane* _plane =dir.createPlane(&jb);
    _plane->show();
    return 0;
}
\\\
structural design pattenr 
1) adapter design pattern 
kind of driver call where we can call the ApI which will internally call the respective api
2) bridge design patten 
circle and shape class design 
3)compostion design pattern 
page and copy example
4) decorator design pattern
icecream with chocklet and caramle
5) facade 
engine starting and stoping explamle 
call the al the complex task in a single funtion so the client can cal the single funtion to complete all the tasks
6) proxy 
creating the proxy for one api in other class 
example 
real image class and proxy image class


behaveriol design patten 
chain design pattern 
calling one call api from other class if the task cannot be handled in the current class	q

Observer Pattern
sending notification to all objects


 