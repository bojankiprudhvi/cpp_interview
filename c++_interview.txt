Ipc
Shared memory
2pc communication
Thread
Sync
Deadlock
Udp socket
How we use linux envoirment
Constant pointer
Array vs vector
Map
Malloc vs cpp
New -malloc
Which cpp worked-C++11 C++14
Constant pointers
Size of class
Destructor
virtual ``	
pure virtual
abstract class
Inheritance
Dynamic memory allocation(new delete)



Abstraction
Encapsulation
Class design	

Design pattern
Constructor- types
templets






class diagram
design pattern 
stl concepts
project knowledge
oops concepts 
abstraction and pure abstraction
virtual concepts
friend
operator and function over loading and over riding




c++ interview

ipc (inter process communication)
luna message response writign and passign back to aplication using semaphore

thread
pthread.h

pthread_t thread_name
sem_t sem_name
pthread_create(&thread_name,NULL,&void fun,null)
sem_init(&read_sem,0,0);


ffi 
libwebos_luna_bridge_handle = dlopen(webos_luna_bridge.c_str(), RTLD_LOCAL | RTLD_NOW);

      if (libwebos_luna_bridge_handle != NULL)
      {
        webosLunaBridgeRegister = (int (*)())dlsym(libwebos_luna_bridge_handle, "webosLunaBridgeRegister");
        webosLunaSyncCall = (char *(*)(char *uri, char *args, char *ctx, char *appId))dlsym(libwebos_luna_bridge_handle, "webosLunaSyncCall");
		
		
smart poiner->
dealocation is tacken care my itself

1)uniqu poiner(std::unique_ptr<data type>)- only one poineter can to poinet to that memory location
2)shared poineter (shared_ptr<data typ	e>)- two or more pointer can share the same memory
3)weak_ptr will not hold the refernce 


vector
#include <vector>
 vector<int> g1;
 g1.push_back(i);
  for (auto i = g1.begin(); i != g1.end(); ++i)
        cout << *i << " ";
		
size() â€“ Returns the number of elements in the vector.

Map
#include <map>

map<string, int> mp;
    mp["one"] = 1;
    mp["two"] = 2;
    mp["three"] = 3;
    map<string, int>::iterator it = mp.begin();
    while (it != mp.end()) {
        cout << "Key: " << it->first	
             << ", Value: " << it->second << endl;
        ++it;
    }


pointer 
 pointer to constant 
 const int* score{ &high };
 
 const pointer
 int* const ptr{ &a };
 
 const pointer to const
 
 const int a{ 50 };
    const int b{ 90 };
 
    // ptr points to a
    const int* const ptr{ &a };
	
	
size of the class by default 1 so the the odject when created can store the addres sof the class.

When is the destructor called?
A destructor function is called automatically when the object goes out of scope:

the function ends 
the program ends 
a block containing local variables ends 
a delete operator is called  


virtual destructor
Making base class destructor virtual guarantees that the object of derived class is destructed properly, i.e., both base class and derived class destructors are called. For example, 

Encapsulation
getdata 
set data
 
 
 
 interview 1(adagrad ai)
 
 notification when a obj is beign destroyed
 smart pointers
 program to find whether a array is becoming sored when on element is removed form it
 program to find the sum of diagnold in a square matrix
 docker

interview 2(tcs)
liked list program
finding center on linked list(solution using two pointers)
avoiding the blocking of i/o using system calls (fork())
sequirity breach in c++
make file structure and usage
jenkins
git commands (diff)
linux commands (lsof,some more not answered)
socket basic
finding memory leak with out using any tools( top command)
top command with parametres
register in c



interview 3 (dover)
copy constructor wrtign 
relitins betwween classs( conjection and all)
thread in c++
smart pointers unique pointers sharing 

 
 Association, Composition and Aggregation in C++

association one class depends on other calls object 

composition - one classs object is creacteed inside the ortehr class. one class life time depends on otehr class
aggregation - same as composition but both or independent
lambda fucntionn 


auto F = [](int x){
# statements

};


 thread in c++
std::thread thread_obj(&Base::foo, &b, params);


interview(4) xoirinet
linked list delete node
danglign pointer
memory structure(stack memory heap mempry for global and local vareibale)
why virtual 
virtual Inheritance
volatile
        A virtual int A()
      /  \
   A()B  C A()
      \ /
        D
ipc communication


ust global
about project

write a progeam to reverse each word in the sentance using pointers'

semaphore where we used and how multi threads worked



rajesh
boost optinal,bymap,lambda function



global logic

intrruction
c vs cpp
cpp 17 major upgradation
what is pointer
differnce between malloc and calloc
differnce between smart and nrml pointers
what happens when we have same variable defined as staic in two differt files
what happes if you assign val of ptr1 to ptr2 and free ptr2
what is funtion pointer
write the use case of function pointer
volatile  keyword and real time senario
volatile and const can be used at same time?
given int a[4]={1,2,3,4}
what is the output of
&a[0],a[0],a[0]++,&a[0]++,a++,&a++
coading question find the lenght of the longest substring with induvidual characters
differnce between virtual and override keyword




nokia
intruduction 2min only
type of constructor
implemtn them 
memory wise question on copy constructor
deep copy constructor
lambda function creation 
function pointers
what is Encapsulation
polimorpishm 
abstraction
operator overloading 
function overloading
fucntion overloading vs overriding - which is better and why
upordered map vs map
arrray ,unordered map,map which is better and why
list vs array
differnce betweeen strcpy and  strncpy

given two unsorted linked list create a single  sorted linked list


rajesh company (openmyndz)
intruduction
virtual destructor
write a pure virtual classs
write a program to allocate a buffer[x][y] Dynamically
how do you find the end of the memeory that we allocated 
malloc and calloc


mangeral question
why are moving
what are you expectign in terms of work
what domain you worked
what the main agenda of you project



global logic

differnce between malloc and new
why new
difference between 2 types of map
cross compilation 
differnce between mutex and binary semaphore
templets in c++
can you implements a template for any stl type
in which part of the memry the class object will be stored
Crosscompiling 
stages of compilation

round 2 
find the second larget number in a given array
remove the node in the single linked list when the node address is given direcly(constrants all elements are unique and node  to be deleted is not last one)
what is static

while (q=1); what happens

find whetehr there is a cycle in the given linked list 

pritn all the combiantions for the given array of characters

virtual destructor
what are virtual functions



unitmatix
introduction
difference b/w c and c++
what are all oops concepts
in multiple Inheritance if both class A and class B have same variable  how to access the specific function from Class A in derived class
program to find sum of numbers in a given string 
print "Hello" with quitation
find the error in the code (related to comment and \")
testing related 
what are testing you used
diffence b/w white and black box testing


round 2
int v{5};
const int* ptr {&v};
int* const ptr2 {&v};
can we use stl in C
given a array sort the array and find the indexs of given elements (linear v/s binary (time complexilty))
stl
map 
vector
why vector
why map
list v/.s vector
linked list insertion in all 3 cases (begin,end,pos)
desing pattern
singleton
factory
adapter
random applitude quesdtion


l&t (amd client)
basic project questions 
allocat ememory using new key word for an array of 100 blocks
move the pointer to 50 blocks forward 
call delete pointer 
what it will happen 
how the delete will know how many blocks to delete 
write a program to merge two sorted liked list into single sorted linked list with out extra space
                                                                                            

inccedo
final round
project internal questions
differnce between shallow copy and deep copy
implent the copy constructor and assignment operator
threads
and impement two threads to print even and odd numbers and sync them properly(used semaphore )
why not mutex instead of semaphore
pointers vs refernces
refernces used in your projext
virtual funtions and run time polymorphisam


